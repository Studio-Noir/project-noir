<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

/* Initialise basic physics */
physics_gravity = 0.8; /* ref. gravity */
speed_horizontal = 0; /* ref. hspeed */
speed_vertical = 0;  /* ref. vspeed */
speed_jump = 14;
speed_move = 7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Perform movement actions

/* 
    This code determines all actions that the player will complete at each 'step'. 
    This includes jumps, moves, pushes, etc.
*/

key_right = keyboard_check(vk_right); // Instantiates action for right keyboard click.
key_left = -keyboard_check(vk_left); // Instantiates action for left keyboard click.
key_jump = keyboard_check_pressed(vk_space);

/*
    This code responds to the inputs pressed.
*/

move = key_left + key_right;
speed_horizontal = move * speed_move;

if (speed_vertical &lt; 10) { // Vertical speed affected by gravity; limited to 10 downwards.
    speed_vertical += physics_gravity;
}
if (place_meeting(x, y+1, obj_ground)) {
    speed_vertical = key_jump * -speed_jump; 
}
 
x = clamp(x, 0, room_width); // Can't leave the room.
y = clamp(y, 0, room_height);

/* 
    Collision Detection
*/

if (place_meeting(x+speed_horizontal, y-1, obj_ground)) {
    while(!place_meeting(x+sign(speed_horizontal),y, obj_ground)) {
        x += sign(speed_horizontal);
    }
    speed_horizontal = 0;
}

if (place_meeting(x, y+speed_vertical, obj_ground)) {
    while(!place_meeting(x,y+sign(speed_vertical), obj_ground)) {
        y += sign(speed_vertical);
    }
    speed_vertical = 0;
}

x += speed_horizontal;
y += speed_vertical;

/* 
    Character Direction Adjustment 
*/ 

if (move &gt; 0) {
    image_xscale = -1;
} else if (move &lt; 0) {
    image_xscale = 1;
} 

if (speed_vertical != 0) {
    sprite_index = spr_char_jump;
} else if (move != 0) {
    sprite_index = spr_char_walk;
} else {
    sprite_index = spr_char;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
