<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables

/* Initialise basic physics */
physics_gravity = 0.8; /* ref. gravity */
speed_horizontal = 0; /* ref. hspeed */
speed_vertical = 0;  /* ref. vspeed */
speed_jump = 12;
speed_move = 6;
speed_climb = 6;
direction_horizontal = 1;

/* Object interactions */
ladder = false;
block = false;

/* Sprite animation management */
STATE_STAND = 1;
STATE_JUMP = 2;
STATE_WALK = 3;

/* Input/orb variables */
key_orb1 = false;
key_orb2 = false;
orb_cooldown = 0;
orb_cooldown_max = 10;
lob_power = 0;
lob_power_max = 25;
light_size = 1000;

/* Camera movement for vines */
old_xview = view_xview[0];
old_yview = view_yview[0];
x_pre = x;
y_pre = y;

/* Init Character */
sprite_state = STATE_STAND;
state = scr_move_state;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>333</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_save_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>savegame</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (light_or_dark == 1) { // light world
    draw_set_blend_mode(bm_normal);
    surface_set_target(light_overlay);
    draw_ellipse_color(-500, -150, 1850, 1000, c_black, c_white, false);
    //draw_ellipse_color(x - light_size/2 - view_xview, y - light_size/2 - view_yview - sprite_height/2, x + light_size/2 - view_xview, y + light_size/2 - view_yview - sprite_height/2, c_black, c_gray, false);
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
} else { // dark world
    draw_set_blend_mode(bm_subtract);
    surface_set_target(light_overlay);
    draw_set_alpha(0.8);
    draw_ellipse_color(x - light_size/2.5 - view_xview, y - light_size/2.5 - view_yview - sprite_height/2, x + light_size/2.5 - view_xview, y + light_size/2.5 - view_yview - sprite_height/2, c_white, c_black, false);
    draw_ellipse_color(-500, -150, 1850, 1000, c_white, c_black, false);
    draw_set_alpha(1);
    surface_reset_target();
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Execute player state
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play enemy sounds depending on how close they are to Soleil
if (distance_to_object(obj_enemy1) &lt; 800 || distance_to_object(obj_enemy1) &lt; 800) {
    if (!audio_is_playing(snd_enemy)) {
        audio_play_sound(snd_enemy, 10, true);
    }
    if (distance_to_object(obj_enemy1) &lt; distance_to_object(obj_enemy2)) {
        vol = 1 - (distance_to_object(obj_enemy1) / 800);
    } else {
        vol = 1 - (distance_to_object(obj_enemy2) / 800);
    }
    sound_volume(snd_enemy, vol);
} else {
    audio_stop_sound(snd_enemy);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup xview monitoring
if (x_pre == x &amp;&amp; y_pre == y) {
    view_xview[0] = old_xview;
    view_yview[0] = old_yview;
    x = x_pre;
    y = y_pre;
} else {
    x_pre = x;
    y_pre = y;
    old_xview = view_xview[0];
    old_yview = view_yview[0];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw lob ui
if (lob_power &gt; 0) {
    draw_sprite_ext(spr_charge_bg, -1, self.x - view_xview, self.y + 50 - view_yview, 1, 1, 0, c_white, 1);
    draw_sprite_ext(spr_charge_meter_2, -1, self.x - 108 - view_xview, self.y + 50 - view_yview, lob_power / lob_power_max, 1, 0, c_white, 1);
    draw_sprite_ext(spr_charge_overlay, -1, self.x - view_xview, self.y + 50 - view_yview, 1, 1, 0, c_white, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
